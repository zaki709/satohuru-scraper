[tool.poetry]
name = "Satohuru_scraper"
version = "0.1.0"
description = ""
authors = ["Zaki Taisei <t0709zaki@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "3.11.6"
python-decouple = "^3.8"
load-dotenv = "^0.1.0"
boto3 = "^1.34.0"
python-json-logger = "^2.0.7"
aws-lambda-powertools = { extras = ["validation"], version = "^2.30.1" }
pydantic = "^2.5.2"

[tool.poetry.group.dev.dependencies]
taskipy = "^1.12.2"
mypy = "^1.7.1"
black = "^23.12.0"
ruff = "^0.1.7"
pytest = "^7.4.3"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
isort = "^5.13.2"
aws-lambda-powertools = { extras = ["aws-sdk"], version = "^2.30.1" }
boto3-stubs = { extras = ["boto3"], version = "^1.34.2" }
faker = "^21.0.0"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.taskipy.tasks]
migrate = "python migrations/main.py"
test = "pytest -s -vv --cov=. --cov-branch --cov-report=html"
format = "task format-black && task format-isort"
format-black = "black src tests"
format-isort = "isort src tests"
lint = "task lint-black && task lint-ruff && task lint-mypy"
lint-ruff = "ruff src tests"
lint-mypy = "mypy src tests"
lint-black = "black --check src tests"


[tool.black]
line-length = 100


[tool.isort]
# see: https://pycqa.github.io/isort/docs/configuration/multi_line_output_modes.html
profile = "black"
line_length = 100
import_heading_stdlib = "Standard Library"
import_heading_thirdparty = "Third Party Library"
import_heading_firstparty = "First Party Library"
import_heading_localfolder = "Local Library"
multi_line_output = 3
include_trailing_comma = true


[tool.mypy]
# The mypy configurations: https://mypy.readthedocs.io/en/stable/config_file.html
# Prefixes each error with the relevant context.
show_error_context = true
# Shows column numbers in error messages.
show_column_numbers = true
# Suppresses error messages about imports that cannot be resolved.
ignore_missing_imports = true
# Disallows defining functions without type annotations or with incomplete type annotations (a superset of disallow_incomplete_defs)
disallow_untyped_defs = true
# Shows a warning when returning a value with type Any from a function declared with a non- Any return type.
warn_return_any = true
# Shows a warning when encountering any code inferred to be unreachable or redundant after performing type analysis.
warn_unreachable = true
# Warns about unneeded # type: ignore comments.
warn_unused_ignores = true
# Warns about casting an expression to its inferred type.
warn_redundant_casts = true


[tool.ruff]
exclude = [".venv", "__pycache__", ".git"]
line-length = 100
indent-width = 4
